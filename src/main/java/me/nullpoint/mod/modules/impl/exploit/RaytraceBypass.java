package me.nullpoint.mod.modules.impl.exploit;

import me.nullpoint.api.events.eventbus.EventHandler;
import me.nullpoint.api.utils.math.Timer;
import me.nullpoint.asm.mixins.AccessorPlayerMoveC2SPacket;
import me.nullpoint.mod.modules.Module;
import me.nullpoint.mod.modules.settings.impl.BooleanSetting;
import me.nullpoint.mod.modules.settings.impl.EnumSetting;
import me.nullpoint.mod.modules.settings.impl.SliderSetting;
import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class RaytraceBypass extends Module {
    public static RaytraceBypass INSTANCE;
    public RaytraceBypass() {
        super("RaytraceBypass", Category.Exploit);
        INSTANCE = this;
    }
    private final BooleanSetting Always = add(new BooleanSetting("Always", true));
    private final EnumSetting<Mode> mode = add(new EnumSetting<>("RaytraceMod", Mode.Motion));
    private final SliderSetting Keep = add(new SliderSetting("Keep", 2.0, 0.0, 10.0));
    private final SliderSetting Delay = add(new SliderSetting("Delay", 250, 0, 1000));
    private final SliderSetting offset = add(new SliderSetting("Offset", 15.0, 0.0, 40.0));
    private final Timer timer = new Timer();

    private float pitch = -91;

    @EventHandler
    public void onPacketSend(Packet<?> packet) {
        switch (mode.getValue()) {
            case Packet -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passedMs(Delay.getValue())) {
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch((0 + Keep.getValue()), (.0 + offset.getValue()), (0 + Keep.getValue())))) {
                        pitch = (float) -75;
                        timer.reset();
                    }
                }
            }
            case Motion -> {
                if (packet instanceof PlayerMoveC2SPacket movePacket && pitch != -91) {
                    if (Always.getValue()) {
                        ((AccessorPlayerMoveC2SPacket) movePacket).setPitch(pitch);
                    }
                    ((AccessorPlayerMoveC2SPacket) movePacket).setPitch(pitch);
                    pitch = -91;
                }
            }
            case Client -> {
                if (packet instanceof PlayerInteractBlockC2SPacket && timer.passedMs(Delay.getValue())) {
                    if (mc.player != null && mc.world != null && mc.world.isSpaceEmpty(mc.player.getBoundingBox().stretch((0 + Keep.getValue()), (.0 + offset.getValue()), (0 + Keep.getValue())))) {
                        pitch = -75;
                        timer.reset();
                    }
                }
            }
        }
    }


    public enum Mode {
        Packet,
        Client,
        Motion
    }
}